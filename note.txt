<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js" defer></script>
  <script src="index.js" defer></script>
  
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="nav.css"/>
    <title>HAMDARDDIALYSIS</title>
</head>
<body>
  <hi>HAMDARDDIALYSIS</hi>
  <hr /> <br />
  
  <div>
      <h3>For Booking or any query</h3><br>
      <h3>Call on :- 9311241059</h3>
      <h3>Call on :- 7863841059</h3>
  </div>
  <hr>
  <div>
      <h1>We will connect to you shortly.</h1>
  </div>
    
    
    
</body>
</html>



******************************************************************

 // const steps = {
  //   countries: limitCountries / (duration / 1000),
  //   city: limitCity / (duration / 100),
  //   centre: limitCentre / (duration / 50),
  //   employees: limitEmployees / (duration / 50),
  // };

  // useEffect(() => {
  //   let interval: NodeJS.Timeout;

  //   function updateCounters() {
  //     setCountries((prev) =>
  //       Math.floor(Math.min(prev + steps.countries, limitCountries))
  //     );
  //     setCity((prev) => Math.floor(Math.min(prev + steps.city, limitCity)));
  //     setCentre((prev) =>
  //       Math.floor(Math.min(prev + steps.centre, limitCentre))
  //     );
  //     setEmployees((prev) =>
  //       Math.floor(Math.min(prev + steps.employees, limitEmployees))
  //     );
  //   }

  //   interval = setInterval(updateCounters, 1); // Update every second

  //   return () => {
  //     clearInterval(interval);
  //   };
  // }, [limitCountries, limitCity, limitCentre, limitEmployees, steps]);






******************************************************************


import React, { useState, useEffect, useMemo } from "react";
import carouselImages from "../../assets/static/carouselImages";
import { GrCaretNext } from "react-icons/gr";
import { GrCaretPrevious } from "react-icons/gr";

// interface HomeCarouselProps {
//   images: string[];
// }

// interface HomeCarouselState {
//   activeSlide: number;
// }

const HomeCarousel: React.FC = () => {
  const [activeSlide, setActiveSlide] = useState(0);

  const autoPlay = useMemo(() => {
    return () => {
      const newInterval = setInterval(
        () =>
          setActiveSlide((prev) =>
            prev >= carouselImages.length - 1 ? 0 : prev + 1
          ),
        3000
      );

      return newInterval;
    };
  }, []);

  useEffect(() => {
    const interval = autoPlay();

    return () => {
      clearInterval(interval);
    };
  }, [activeSlide, autoPlay]);

  const goToSlide = (index: number) => {
    setActiveSlide(index);
  };

  const goToPreviousSlide = () => {
    const prevSlide =
      (activeSlide - 1 + carouselImages.length) % carouselImages.length;
    setActiveSlide(prevSlide);
  };

  const goToNextSlide = () => {
    const nextSlide = (activeSlide + 1) % carouselImages.length;
    setActiveSlide(nextSlide);
  };

  return (
    <section id="carouselExampleCaptions" className="relative shadow-lg">
      {/* Carousel indicators */}
      <div className="absolute bottom-0 left-0 right-0 z-[2] ml-[5%] mb-4 flex list-none justify-start p-0">
        {carouselImages.map((_, index) => (
          <button
            key={index}
            type="button"
            onClick={() => goToSlide(index)}
            className={`mx-[3px] box-content h-[3px] w-[30px] flex-initial cursor-pointer border-0 border-y-[10px] border-solid border-transparent bg-white bg-clip-padding p-0 ${
              activeSlide === index ? "opacity-100" : "opacity-50"
            }`}
            aria-current={activeSlide === index ? "true" : undefined}
            aria-label={`Slide ${index + 1}`}
          />
        ))}
      </div>

      {/* Carousel items */}
      <section className="relative w-full max-h-fit overflow-hidden bg-[#09608C] after:clear-both after:block after:content-[''] py-5">
        {carouselImages.map((image, index) => (
          <div
            key={index}
            className={`relative flex justify-center items-center flex-col-reverse sm:flex-row w-full h-fit transition-transform duration-[600ms] ease-in-out ${
              activeSlide === index
                ? "opacity-100 transition-opacity duration-300"
                : "hidden"
            } `}
          >
            {/* Content for each slide */}
            <section className="w-full md:w-[70%] text-white ">
              <div
                className={`px-10 flex flex-col gap-10 ${
                  activeSlide === index ? "" : ""
                } `}
              >
                <div className="">
                  <h5 className="md:text-[3rem] text-[2.5rem] text-white text-center md:text-start">
                    {image.headingA}
                  </h5>
                  <h5 className="md:text-[3rem] text-[2.5rem] text-blue-300 text-center md:text-start">
                    {image.headingB}
                  </h5>
                </div>
                <p className="md:text-[1.5rem] text-[1.5rem]  ">{image.para}</p>

                <button
                  type="button"
                  className="bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500 py-2 mb-10 md:mb-0 "
                >
                  Know More{" "}
                </button>
              </div>
            </section>

            <img
              src={image.url}
              className={`w-full object-contain  `}
              alt={`Slide ${index + 1}`}
              loading="lazy"
            />
          </div>
        ))}
      </section>

      {/* Carousel controls */}
      <button
        className="flex absolute bottom-0 left-0 top-0 z-[1] w-[15%] items-center justify-center border-0 bg-none p-0 text-center text-white opacity-30 transition-opacity duration-150 ease-[cubic-bezier(0.25,0.1,0.25,1.0)] hover:text-white hover:no-underline hover:opacity-90 hover:outline-none focus:text-white focus:no-underline focus:opacity-90 focus:outline-none motion-reduce:transition-none"
        type="button"
        onClick={goToPreviousSlide}
      >
        {/* Previous arrow SVG */}
        <GrCaretPrevious />
      </button>
      <button
        className="absolute bottom-0 right-0 top-0 z-[1] flex w-[15%] items-center justify-center border-0 bg-none p-0 text-center text-white opacity-30 transition-opacity duration-150 ease-[cubic-bezier(0.25,0.1,0.25,1.0)] hover:text-white hover:no-underline hover:opacity-90 hover:outline-none focus:text-white focus:no-underline focus:opacity-90 focus:outline-none motion-reduce:transition-none"
        type="button"
        onClick={goToNextSlide}
      >
        {/* Next arrow SVG */}
        <GrCaretNext />
      </button>
    </section>
  );
};

export default HomeCarousel;
